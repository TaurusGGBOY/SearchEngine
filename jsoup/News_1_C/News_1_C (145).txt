精益创业中推崇的是最小可行产品 找到痛点 计算出最简原型 转为最小可行产品 在用户的反馈下不断做迭代 在产品从 到 的阶段 最小可行产品 非常实用 在我们学习新知识时也一样 从 到 应以 学以致用 为主 将我们的最终目标简化到让它能够跑起来的配置 再用最快的速度搞定这些配置让它跑起来 之后再折腾什么也有个依托 这样就不致于变成孤立的知识点 转身就忘掉 对小白来说 对于新知识体系是没有感知的 只觉得最全最详细的最好 但真正去学的时候 大而全的体系会让人找不着北 一个个新知识蜂拥而上 消化不掉很容易放弃 假如我们还是按填鸭式教育那样学习 买一本从入门到 精通 的书 从第一章顺序往下看 很有可能学到一半就放弃 就像是在用大石头画一幅巨图 在下面堆石头的人不知道现在画到什么程度了 一开始推石头还挺轻松 堆多了之后就不行了 一门从入门到 精通 书籍 描述的是一个最终态 必需每一章都顶配 才能构建出这个最终态 而 最小可行系统 只要求最简配置就能跑起来 得到一些正反馈后再去强化升级 如果跟着书一章章学习 验证和反馈机制太漫长 学习效率就慢下来了 最小可行体系 是为了掌握某个新知识所需要的最简环境 每款游戏都有最小配置要求 你要做的就是配好最简环境 让你的知识先跑起来 只要它跑起来 惯性使它短时间不会停下来 然后再慢慢添加配置 最终达到稳定 事实上 如果已经熟练掌握一门语言 其他语言的部分知识体系是重复的 例如网络 缓存 线程 权限设计等 无非是那些语言 出来的 不一样罢了 但有了 最小可行体系 还远远不够 这只是快速评估该语言是否适合你的开始 如果你还想让这个小体系变成一张知识结构网 就需要不断地围绕着它做优化 直到它能够成为你技术变现的一个出口 另外