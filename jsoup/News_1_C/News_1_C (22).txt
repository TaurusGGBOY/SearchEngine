 是一种面向服务的体系结构 是一个组件模型 它将应用程序的不同功能单元 称为服务 通过这些服务之间定义良好的接口和契约联系起来 接口是采用中立的方式进行定义的 它应该独立于实现服务的硬件平台 操作系统和编程语言 这使得构建在各种这样的系统中的服务可以以一种统一和通用的方式进行交互 架构中有两个主要角色 服务提供者 和服务使用者 而软件代理则可以扮演这两个角色 该 层是用户 人 应用程序或第三方的其它组件 与 交互的点 和 层则由 架构内的所有服务所构成 虽然面向服务的体系结构不是一个新鲜事物 但它却是更传统的面向对象的模型的替代模型 面向对象的模型是紧耦合的 已经不符合业务开发时 高内聚 低耦合 的要求 虽然基于 的系统并不是完全的排除使用面向对象的设计来构建单个服务 但是其整体设计却是面向服务的 由于它考虑到了系统内的对象 所以虽然 是基于对象的 但是作为一个整体 它却不是面向对象的 不同之处在于接口本身 系统原型的一个典型例子是通用对象请求代理体系结构 它已经出现很长时间了 其定义的概念与 相似 其实和 架构类似 微服务是在 上做的升华 微服务架构强调的一个重点是 业务需要彻底的组件化和服务化 原有的单个业务系统会拆分为多个可以独立开发 设计 运行的小应用 这些小应用之间通过服务完成交互和集成 基本上 这种架构类型是开发软件 网络或移动应用程序作为独立服务套件 又称微服务 的一种特殊方式 这些服务的创建仅限于一个特定的业务功能 如用户管理 订单管理 内容管理等 各个服务之间是完全独立的 也就是说它们可以写入不同的编程语言并使用不同的数据库 集中式服务管理几乎不存在 微服务使用轻量级 或 进行通信 微服务与 有很多相同之处 两种架构都属于典型的 包含松耦合分布式组件的系统结构 在围绕着服务的概念创建架构这一方面 微服务提供了一种更清晰 定义更良好的方式 不能简单地说一种架构比另一种架构更好 主要是取决于构建的应用程序 微服务的原则与敏捷软件开发思想是高度一致的 而它与 原则的演化的目标也是相同的 则减少传统的企业服务总线开发的高复杂性 更适合与许多其他应用程序集成的大型复杂企业应用程序环境 在我看来 小型的应用程序或许并不适合使用 架构 因为它不需要使用消息中间件组件 而微服务架构 在另一方面 是更适合于较小和良好的分割 基于 的系统 两者之间最关键的区别在于 微服务专注于以自治的方式产生价值 但是两种架构背后的意图是不同的 尝试将应用集成 一般采用中央管理模式来确保各应用能够交互运作 微服务尝试部署新功能 快速有效地扩展开发团队 它着重于分散管理 代码再利用与自动化执行 微服务并不是一种新思想的方法 它更像是一种思想的精炼 一种 的精细化演进 并且更好地利用了先进的技术以解决问题 例如容器与自动化等