我使用的 是 版本 对应的帮助文档是 文档是 文档 容器相关结构体 比如 等 编解码器相关结构体 编解码器参数相关结构体 对流的抽象 对输出文件格式的抽象 用来存原始帧数据 比如编码前的 数据 或者解码后的 数据 用来存编码后的包数据 或者解码前的包数据 比如 的帧数据 帧数据 注册相关编解码器 和混合器 视频和音频混合 和分流器 将视频和音频分流 网络相关的注册 如果还没有做网络相关的播放可以不用注册 比如你使用了 相关的操作就需要注册 注意 要先将 不然会有异常发生 这个是打开输入流 打开输入流并且读取文件头 比如 的头部信息 一般会有音频 视频相关的参数信息 记得用 关闭 这个获取输入的相关信息 上面已经打开了 现在我们就是要使用里面的相关信息 比如视频一般有视频流 或者音频流 甚至还有字幕流 今天我们就解码视频我们就关系视频就行了 这个是告诉我们这个文件一共有几个流 音频视频等 遍历的方式拿到音频 视频的流对应的 也可以说轨道 顺便也把他的解码 找到 申请一个 用来解码使用的 记得把对应的参数 过去 不然解码器不知道容器中的视频是怎么样的 比如帧率 分辨率等 初始化解码器 这个是从容器中读取 这个还是编码状态的 读取容器中的 我是单独使用的线程 读取后分别根据是音频还是视频再分发出去 使用观察者模式 然后送入解码 这个是解码后的数据 就是当前帧的显示时间 还有关于 相关的参数 如果我们数据是 相关的数据 那么 指向的就是 的 指向的就是 指向的就是 音频的 如果是双声道的并且是平面存储的那么 指向一个声道 指向一个声道 比如双声道存储方式有 也有 对应是左声道 对应右声道 前者是直接存储在 中 后者是分开成 存储左声道 存储右声道 视频的话就是一个图像横向有多少个字节 那不就是图像的宽度么 不全是 因为为了读写速度的原因 会有 相关的补齐措施 有可能是比 大的 如果是对应 对应的字节数 对应的字节数 一般是 的一半 对应的字节数 同上 如果是音频的话就是对应的声道占多少个字节 这个是一帧音频有多少个采样 比较多 当然也只是我们这样叫 并不是 就是一帧 这个不和视频一样 视频是一个画面就是一帧 对应项目 这是一个整体的 现在只是将其中的小模块分解 记录下