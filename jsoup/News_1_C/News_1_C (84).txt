大多用的都是基数版本 其中出名的为 系列的 版本 和 版本 主从复制 数据库自身提供的主从复制功能可以方便的实现数据的多处自动备份 实现数据库的拓展 多个数据备份不仅可以加强数据的安全性 通过实现读写分离还能进一步提升数据库的负载性能 下图就描述了一个多个数据库间主从复制与读写分离的模型 在一主多从的数据库体系中 多个从服务器采用异步的方式更新主数据库的变化 业务服务器在执行写或者相关修改数据库的操作是在主服务器上进行的 读操作则是在各从服务器上进行 如果配置了多个从服务器或者多个主服务器又涉及到相应的负载均衡问题 关于负载均衡具体的技术细节还没有研究过 今天就先简单的实现一主一从的主从复制功能 主从复制的实现原理图大致如下 来源网络 之间数据复制的基础是二进制日志文件 一台 数据库一旦启用二进制日志后 其作为 它的数据库中所有操作都会以 事件 的方式记录在二进制日志中 其他数据库作为 通过一个 线程与主服务器保持通信 并监控 的二进制日志文件的变化 如果发现 二进制日志文件发生变化 则会把变化复制到自己的中继日志中 然后 的一个 线程会把相关的 事件 执行到自己的数据库中 以此实现从数据库和主数据库的一致性 也就实现了主从复制 主从实践 从服务器 具体实现过程如下 修改 配置 找到主数据库的配置文件 在 在 部分插入如下两行 重启 创建用于同步的用户账号 进入 数据库 创建用户并授权 查看 状态 记录二进制文件名 和位置 修改 配置 重启 进入 中 执行同步 语句 需要主服务器主机名 登陆凭据 二进制文件的名称和位置 名称和位置可以通过在 中执行 进行查看 启动 同步进程 查看 状态 排错 导致 为 的原因主要有以下 几个方面 网络不通 密码不对 账号授权不对 找好错误 地址错误 不对 和 两端防火墙 导致 为 的原因可能是 在配置 同步时 因为 访问 没有权限导致 中的 误删或者配置文件中 参数设置有问题 导致 在配置 同步时 与 两参数与 不同步 在配置 同步时 因为 访问 没有权限导致 端创建用户并授权步骤 相同 删除 文件 并重新启动 启动失败 可尝试 重置 再启动 开启二进制日志后默认记录所有库所有表的操作 可以通过配置来指定只记录指定的数据库甚至指定的表的操作 具体在 配置文件的 可添加修改如下选项 异步复制 默认的复制即是异步的 主库在执行完客户端提交的事务后会立即将结果返给给客户端 并不关心从库是否已经接收并处理 这样就会有一个问题 主如果 掉了 此时主上已经提交的事务可能并没有传到从上 如果此时 强行将从提升为主 可能导致新主上的数据不完整 全同步复制 指当主库执行完一个事务 所有的从库都执行了该事务才返回给客户端 因为需要等待所有从库执行完该事务才能返回 所以全同步复制的性能必然会收到严重的影响 半同步复制 介于异步复制和全同步复制之间 主库在执行完客户端提交的事务后不是立刻返回给客户端 而是等待至少一个从库接收到并写到 中才返回给客户端 相对于异步复制 半同步复制提高了数据的安全性 同时它也造成了一定程度的延迟 这个延迟最少是一个 往返的时间 所以 半同步复制最好在低延时的网络中使用 半同步复制 想要使用半同步复制 异步复制必须已经存在 半同步复制是一个功能模块 库要能支持动态加载才能实现半同步复制 首先加载插件 因为需要执行 和 等操作 所以用户需要 权限 端 查看插件是否加载成功 查看插件是否加载成功 查看半同步是否在运行 端 验证方式 查看半同步是否在运行 两个变量常用来监控主从是否运行在半同步复制模式下 如全部启动正常 半同步复制基本搭建完成