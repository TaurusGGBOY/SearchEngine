简单聊一下各种编程语言的优缺点： Java Java的优点： 1.简单性 2.面向对象性（面向对象的程度可以达到95%） 3.健壮性 4.跨平台性 5.高性能（自动垃圾回收机制） 6.多线程 7.动态性 8.安全性 Java的缺点： 1.效率低（毋庸置疑） 2.跨平台是它最大的优点也是最大的缺点 3.复杂性（做一个项目需要很多的知识，涉及面广） C语言 C语言的优点： 1.简洁紧凑、灵活方便 2.运算符丰富 3.数据结构丰富 4. C是结构式语言 5. C语法限制不太严格，程序设计自由度大 6. C语言允许直接访问物理地址，可以直接对硬件进行操作 7. C语言程序生成代码质量高，程序执行效率高 8. C语言适用范围大，可移植性好 9. C语言有一个突出的优点就是适合于多种操作系统,如DOS、UNIX,也适用于多种机型 10.有效地将一个较复杂的程序系统设计任务分解成许多易于控制和处理的子任务，便于开发和维护 C语言的缺点： C++缺点： 1.比较底层，易用性不是很好 2.多重继承和友元机制 3.标准库涵盖范围不足4.开发周期长 5.非并行 6.掌握有难度 7.粒度封装不够 汇编语言： 汇编语言（Assembly Language）是面向机器的程序设计语言。 汇编语言的优点 了解和使用汇编语言有以下一些优点： 说明程序是如何与操作系统、处理器和BIOS接口的； 说明数据是如何表示并存储在存储器与外部设备上的； 阐述处理器是如何访问与执行指令的，以及指令是如何访问与处理数据的； 阐述程序是如何访问外部设备的。 另外，使用汇编语言的理由是： 能够直接访问与硬件相关的存储器或I/O端口； 能够不受编译器的限制，对生成的二进制代码进行完全的控制； 能够对关键代码进行更准确的控制，避免因线程共同访问或者硬件设备共享引起的死锁； 能够根据特定的应用对代码做最佳的优化，提高运行速度； 能够最大限度地发挥硬件的功能； 用汇编语言编写的程序比用高级语言编写的程序所要求的存储空间与执行时间将显著减少； 汇编语言使程序员可以完成技术性非常强的任务；而使用高级语言，即使可能做到，恐怕也会非常困难； 虽然大多数软件专家是用高级语言开发新的应用软件的（那样做，程序会比较容易编写的维护），但是对于执行时间要求比较苛刻的部分，常常还要用汇编语言来重新编写； 常驻程序（当其他程序运行的时候，常驻在存储器中的程序）和中断服务例行程序（处理输入与输出的程序）几乎都是用汇编语言开发的。 汇编语言的缺点 虽然汇编语言有诸多的优点，同时还应该认识到，汇编语言是一种层次非常低的语言，它仅仅高于直接手工编写二进制的机器指令码，因此不可避免地存在一些缺点： 编写的代码非常难懂，不好维护； 很容易产生Bug，难于调试； 只能针对特定的体系结构和处理器进行优化； 开发效率很低，时间长且单调。 Go语言 Go优点：1.部署简单。Go 编译生成的是一个静态可执行文件，除了 glibc 外没有其他外部依赖。这让部署变得异常方便：目标机器上只需要一个基础的系统和必要的管理、监控工具，完全不需要操心应用所需的各种包、库的依赖关系，大大减轻了维护的负担。这和 Python 有着巨大的区别。由于历史的原因，Python 的部署工具生态相当混乱【比如 setuptools, distutils, pip, buildout 的不同适用场合以及兼容性问题】。官方 PyPI 源又经常出问题，需要搭建私有镜像，而维护这个镜像又要花费不少时间和精力。2.并发性好。Goroutine 和 channel 使得编写高并发的服务端软件变得相当容易，很多情况下完全不需要考虑锁机制以及由此带来的各种问题。单个 Go 应用也能有效的利用多个 CPU 核，并行执行的性能好。这和 Python 也是天壤之比。多线程和多进程的服务端程序编写起来并不简单，而且由于全局锁 GIL 的原因，多线程的 Python 程序并不能有效利用多核，只能用多进程的方式部署；如果用标准库里的 multiprocessing 包又会对监控和管理造成不少的挑战【我们用的 supervisor 管理进程，对 fork 支持不好】。部署 Python 应用的时候通常是每个 CPU 核部署一个应用，这会造成不少资源的浪费，比如假设某个 Python 应用启动后需要占用 100MB 内存，而服务器有 32 个 CPU 核，那么留一个核给系统、运行 31 个应用副本就要浪费 3GB 的内存资源。良好的语言设计。从学术的角度讲 Go 语言其实非常平庸，不支持许多高级的语言特性；但从工程的角度讲，Go 的设计是非常优秀的：规范足够简单灵活，有其他语言基础的程序员都能迅速上手。更重要的是 Go 自带完善的工具链，大大提高了团队协作的一致性。比如 gofmt 自动排版 Go 代码，很大程度上杜绝了不同人写的代码排版风格不一致的问题。把编辑器配置成在编辑存档的时候自动运行 gofmt，这样在编写代码的时候可以随意摆放位置，存档的时候自动变成正确排版的代码。此外还有 gofix, govet 等非常有用的工具。3.执行性能好。虽然不如 C 和 Java，但通常比原生 Python 应用还是高一个数量级的，适合编写一些瓶颈业务。内存占用也非常省。