一、单线程模式单例 二、多线程加锁单例 三、系统GCD创建单例 GCD创建单例不仅可以解决多条线程的线程安全问题，也能保证性能，是官方推荐的方式。 dispatch_once主要是根据onceToken的值来决定怎么去执行代码。 1.当onceToken = 0时，线程执行dispatch_once的block中代码 2.当onceToken = -1时，线程跳过dispatch_once的block中代码不执行 3.当onceToken为其他值时，线程被阻塞，等待onceToken值改变 当线程调用shareInstance,此时onceToken = 0，调用block中的代码，此时onceToken的值变为140734537148864。当其他线程再调用shareInstance方法时，onceToken的值已经是140734537148864了，线程阻塞。当block线程执行完block之后，onceToken变为-1.其他线程不再阻塞，跳过block。下次再调用shareInstance时，block已经为-1.直接跳过block。 优化完善  上面的方法是把其可能出现的初始化方法做了相应的处理来其保证安全性 其实我们可以在不做处理的情况下 禁止外部调用岂不是更简单 个人感觉该方法也很不错而且一些成熟的第三方中的单例中也有使用该方法的 直接在你创建的单例文件的.h文件中加入代码 .m文件实现一个方法即可,上面方式的其他方法就不要写了 