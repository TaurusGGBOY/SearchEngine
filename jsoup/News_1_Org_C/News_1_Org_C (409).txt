Velocity模板语法（类似Java语法） $!{ 变量/表达式 } ## 注释 ## #* 多行注释 *# for #foreach ($color in $colors) Color$!{foreach.count}/${foreach.index}:$!{color} #end 默认目录：templates 文件：xxx.vm 属性访问 $!{user.name} $!{user.getName()} HttpServletResponse response.addCookie(new Cookie(key, value)); response.addHeader(key, value); HttpServletRequest request.getHeaderNames(); request.getMethod() request.getPathInfo() request.getQueryString() 重定向 301：永久转移 302：临时转移 redirect前缀，跳到首页，默认是302跳转。 从一个页面跳到另一个页面，所有的访问都是同一个HttpSession，可以在redirect中添加session的一些特性，返回到首页的时候，把session的信息读取出来，显示在首页。用户体验较好。 301是永久迁移，如果是301，会把信息存入浏览器，下次浏览器访问网址，会直接定位到另一个地方。 301是临时迁移。 AOP 面向切面，所有业务都要处理的业务 JoinPoint是个包装类，相当于面向切面的交汇点，通过getArgs方法可以获得所有的进入controller的输入参数 ViewObject:方便传递任何数据到Velocity DateTool:velocity自带工具类导入 可以知道用户是这个用户。 注册成功后会进行自动登陆，对于登陆，在登陆操作中，在service层，进行逻辑判断，对上返回状态回到controller，对下dao去和数据库交互。在service登陆代码中，服务器会生成一个string类型的ticket，存入cookie中，key值是ticket，value值是ticket的值。通过response下发到浏览器。 下次在已经登陆的用户，进行其他点击后。在进入controller前，调用preHandle方法处理，它可以检查客户端提交的cookie中是否有服务器之前下发的ticket，如果有证明这个请求是已经登陆的用户了。把登陆的用户放到线程本地变量。在此时才进入controller，可以拿到具体的用户HostHolder类，这是线程本地变量，可以根据登陆的用户进行个性化渲染，比如关注用户的动态，个人收藏等 如下有个PassportInterceptor拦截器，它对于所有页面都进行处理 拦截器1放行，拦截器2 preHandle才会执行。 拦截器2 preHandle不放行，拦截器2 postHandle和afterCompletion不会执行。 只要有一个拦截器不放行，postHandle不会执行  用户数据安全性： https可以防止运行商加塞广告， 公钥加密私钥解密， 用户密码salt防止破解 token有效期 单一平台的单点登陆，登陆IP异常检验 用户状态的权限判断 添加验证码机制，防止爆破和批量注册。 手机验证码，一瞬间一万个请求，0~9999都发到服务器上，总有一个对的上的。如果一个验证码失效，重新下发token Spring Boot Dev Tools 动态加载更新的class 编译加载修改的静态文件 上传图片 一、post方法上传图片到服务器本地，返回UUID的string字符串，形成URl，浏览器可以输入127.0.0.1 + UUID生成的string 组成URL，后台会传回给浏览器response，带有图片的二进制流。浏览器的response中就可以看到接收的图片二进制流，显示出来。fiddler可以通过代理的方式，把网络的底层全部拦截下来 上传到七牛云，做云存储 官方文档： https://developer.qiniu.com/kodo/sdk/1239/java#upload 云可以做实时缩图和实时切图 云实时缩图 阿里云 http://images.nowcoder.com/images/20150205/60_1423125965233_60_1423125960758_%E7 %AE%A1%E7%90%86%E5%91%98%E5%A4%B4%E5%83%8F.png@0e_100w_100h_0c_1i_1o_9 0Q_1x.png 七牛云 http://7xsetu.com1.z0.glb.clouddn.com/300_300.png?imageView2/1/w/100/h/100/ http://developer.qiniu.com/code/v6/api/kodo-api/image/imageview2.html