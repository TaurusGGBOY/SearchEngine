Java 8是Java自Java 5（发布于2004年）之后的最重要的版本。这里我们罗列了Java8中的核心新特性： Java 8在java.lang.Iterable接口中引入了forEach方法，因此在编写代码时，我们只需关注业务逻辑。forEach方法使用java.util.Function.ConsumerObject作为参数，因此它有助于将业务逻辑放在可以重用的单独位置。 Java 8对接口进行了增强，允许接口具有已经实现了的方法。我们可以使用default 和static 关键字来创建带实现方法的接口。例如Iterable接口中的forEach方法便是一个默认方法 默认方法不能覆盖java.lang.Object中的方法。 如果层次结构中的任何类都有一个具有相同签名的方法，那么默认方法就变得不相关了。因为实现接口的任何类都已经将对象作为超类来实现，如果我们在接口中使用了equals()、hashCode()默认方法，那么它将变得无关紧要。这就是为什么为了更清晰起见，不允许接口拥有对象类默认方法。 在 java8 中的接口中不仅增加了默认方法，还增加了静态方法。使用方式接口名.方法名。 函数式接口是Java 8中引入的新概念。 java.util.function包里的函数式接口[2] lambda表达式是一段可以传递的代码，它的核心思想是将面向对象中的传递数据变成传递行为。 我们回顾一下在使用java8之前要做的事，之前我们编写一个线程时是这样的： 也有人会写一个类去实现Runnable接口。 这里采用匿名内部类的目的，就是为了方便 Java 程序员将代码作为数据传递。不过，匿名内部 类还是不够简便。 为了执行一个简单的任务逻辑，不得不加上 6 行冗繁的样板代码。那如果是lambda该怎么做? 在lambda中我们遵循如下的表达式来编写： lambda表达式的类型为函数式接口。 Java 8中添加了一个新的java.util.Stream，用于对集合执行filter/map/reduce类似的操作。Stream API允许顺序执行和并行执行。 StreamAPI对比collections特点[4]： 对stream的操作分为为两类，中间操作(intermediate operations)和结束操作(terminal operations)，二者特点是： 在新的时间API中，Instant表示一个精确的时间点，Duration和Period表示两个时间点之间的时间量。 LocalDate表示日期，即xx年xx月xx日，即不包括时间也不带时区。LocalTime与LocalDate类似， 但只包含时间。LocalDateTime则包含日期和时间。ZoneDateTime表示一个带时区的时间。 DateTimeFormatter提供格式化和解析功能。下面详细的介绍使用方法。 略