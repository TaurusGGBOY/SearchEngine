大多用的都是基数版本。其中出名的为 5系列的 5.5 版本 和 5.7版本。 MySQL主从复制 MySQL数据库自身提供的主从复制功能可以方便的实现数据的多处自动备份，实现数据库的拓展。多个数据备份不仅可以加强数据的安全性，通过实现读写分离还能进一步提升数据库的负载性能。 下图就描述了一个多个数据库间主从复制与读写分离的模型： 在一主多从的数据库体系中，多个从服务器采用异步的方式更新主数据库的变化，业务服务器在执行写或者相关修改数据库的操作是在主服务器上进行的，读操作则是在各从服务器上进行。如果配置了多个从服务器或者多个主服务器又涉及到相应的负载均衡问题，关于负载均衡具体的技术细节还没有研究过，今天就先简单的实现一主一从的主从复制功能。 Mysql主从复制的实现原理图大致如下(来源网络)： MySQL之间数据复制的基础是二进制日志文件（binary log file）。一台MySQL数据库一旦启用二进制日志后，其作为master，它的数据库中所有操作都会以“事件”的方式记录在二进制日志中，其他数据库作为slave通过一个I/O线程与主服务器保持通信，并监控master的二进制日志文件的变化，如果发现master二进制日志文件发生变化，则会把变化复制到自己的中继日志中，然后slave的一个SQL线程会把相关的“事件”执行到自己的数据库中，以此实现从数据库和主数据库的一致性，也就实现了主从复制。 主从实践： 从服务器： 具体实现过程如下： 1.修改mysql配置 找到主数据库的配置文件my.cnf，在/etc/mysql/my.cnf,在[mysqld]部分插入如下两行： 2.重启mysql，创建用于同步的用户账号 进入MySQL数据库 mysql -u root -pRedhat123@ 创建用户并授权： 3.查看master状态，记录二进制文件名(mysql-bin.000003)和位置(73)： 1.修改mysql配置 2.重启mysql，进入MySQL中，执行同步SQL语句(需要主服务器主机名，登陆凭据，二进制文件的名称和位置------>名称和位置可以通过在master中执行show master status进行查看)： 3.启动slave同步进程： 4.查看slave状态： 排错： 导致lave_IO_Running 为connecting 的原因主要有以下 几个方面： 网络不通 密码不对，账号授权不对，找好错误，地址错误 pos不对 Master和Slave两端防火墙 导致lave_IO_Running 为NO 的原因可能是： 在配置Slave同步时（change master to…）因为Slave访问Master没有权限导致。 Master中的/var/lib/mysql/binlog.xxxxxx误删或者配置文件中bin-log=xxx 参数设置有问题。 导致Slave_SQL_Running:NO 在配置Slave同步时master_log_file=xxxxx与master_log_pos=xxxx两参数与master不同步。 在配置slave同步时，因为slave访问master没有权限导致。(master端创建用户并授权步骤。) uuid 相同， 删除 /var/lib/mysql/auto.cnf 文件 并重新启动MySQL。 slave 启动失败 可尝试 reset slave all （重置slave） 再启动slave master开启二进制日志后默认记录所有库所有表的操作，可以通过配置来指定只记录指定的数据库甚至指定的表的操作，具体在mysql配置文件的[mysqld]可添加修改如下选项： 1.异步复制（Asynchronous replication） MySQL默认的复制即是异步的，主库在执行完客户端提交的事务后会立即将结果返给给客户端，并不关心从库是否已经接收并处理，这样就会有一个问题，主如果crash掉了，此时主上已经提交的事务可能并没有传到从上，如果此时，强行将从提升为主，可能导致新主上的数据不完整。 2.全同步复制（Fully synchronous replication） 指当主库执行完一个事务，所有的从库都执行了该事务才返回给客户端。因为需要等待所有从库执行完该事务才能返回，所以全同步复制的性能必然会收到严重的影响。 3.半同步复制（Semisynchronous replication） 介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端。相对于异步复制，半同步复制提高了数据的安全性，同时它也造成了一定程度的延迟，这个延迟最少是一个TCP/IP往返的时间。所以，半同步复制最好在低延时的网络中使用。 半同步复制 想要使用半同步复制，异步复制必须已经存在。 半同步复制是一个功能模块，库要能支持动态加载才能实现半同步复制！ 首先加载插件： 因为需要执行install plugin , set global ,stop slave和start slave等操作，所以用户需要super权限。 Master端： where plugin_name_like’%semi%’; //查看插件是否加载成功。 mysql>show plugins; //查看插件是否加载成功 mysql>show status like ‘Rpl_semi_sync_master_status’; //查看半同步是否在运行。 Slave端： 验证方式： mysql>show status like ‘Rpl_semi_sync_slave_status’; //查看半同步是否在运行 两个变量常用来监控主从是否运行在半同步复制模式下。 如全部启动正常，MySQL半同步复制基本搭建完成。