字符串： 字符串用单引号(’)或双引号(")括起来，不可变 1，find通过元素找索引，可切片，找不到返回-1 2，index，找不到报错。 3，split 由字符串分割成列表，默认按空格。 4，captalize 首字母大写，其他字母小写。 5，upper 全大写。 6，lower 全小写。 7，title，每个单词的首字母大写。 8，startswith 判断以什么为开头，可以切片，整体概念。 9，endswith 判断以什么为结尾，可以切片，整体概念。 10，format格式化输出 #format的三种玩法 格式化输出 res=’{} {} {}’.format(‘egon’,18,‘male’) ==> egon 18 male res=’{1} {0} {1}’.format(‘egon’,18,‘male’) ==> 18 egon 18 res=’{name} {age} {sex}’.format(sex=‘male’,name=‘egon’,age=18) 11,strip 默认去掉两侧空格，有条件， 12，lstrip,rstrip 14,center 居中，默认空格。 15，count查找元素的个数，可以切片，若没有返回0 16，expandtabs 将一个tab键变成8个空格，如果tab前面的字符长度不足8个，则补全8个， 17，replace（old，new,次数） 18，isdigit 字符串由字母或数字组成 isalpha, 字符串只由字母组成 isalnum 字符串只由数字组成 19,swapcase 大小写翻转 20，for i in 可迭代对象。 字典： 1无序（不能索引）2：数据关联性强3:键值对，键值对。唯一一个映射数据类型。 #字典的键必须是可哈希的 不可变类型。 在同一个字典中，键(key)必须是唯一的。 列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取 key： 输出所有的键 clear：清空 dic：删除的键如果没有则报错 pop：键值对删，有返回，没有原来的键会报错（自行设置返回键就不会报错） popitem：随机删键值对 del：删除的键如果没有则报错 改 update 查 用get时。不会报错# 没有可以返回设定的返回值 注意： 1、字典是一种映射类型，它的元素是键值对。 2、字典的关键字必须为不可变类型，且不能重复。 3、创建空字典使用 { }。 列表： 索引，切片，加，乘，检查成员。 增加：有三种， append：在后面添加。 Insert按照索引添加， expend：迭代着添加。 list.extend(seq) - 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表） pop 删除 (pop 有返回值) remove 可以按照元素去删 clear 清空列表 del 1、可以按照索引去删除 2、切片 3、步长（隔着删） 改 1、索引 2、切片：先删除，再迭代着添加 list.count(obj) - 统计某个元素在列表中出现的次数 list.index(obj) - 从列表中找出某个值第一个匹配项的索引位置 list.reverse() - 反向列表中元素 list.sort([func]) - 对原列表进行排序 注意： 1、List写在方括号之间，元素用逗号隔开。 2、和字符串一样，list可以被索引和切片。 3、List可以使用+操作符进行拼接。 4、List中的元素是可以改变的。 元组： （）元组的元素不能修改 1、cmp(tuple1, tuple2)：比较两个元组元素。 2、len(tuple)：计算元组元素个数。 3、max(tuple)：返回元组中元素最大值。 4、min(tuple)：返回元组中元素最小值。 5、tuple(seq)：将列表转换为元组。 注意 1、与字符串一样，元组的元素不能修改。 2、元组也可以被索引和切片，方法一样。 3、注意构造包含0或1个元素的元组的特殊语法规则。 4、元组也可以使用+操作符进行拼接。 Set（集合） ：集合（set）是一个无序不重复元素的序列。 可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。