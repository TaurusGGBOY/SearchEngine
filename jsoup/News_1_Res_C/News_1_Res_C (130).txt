开发 过程 两个 类似 产品 代码 合并 减少 代码 维护 量 减少 物料 维护 成本 两个 产品 通信用 结构 体内 元素 区别 结构体 元素 便宜 地址 变化 增加 元素 设计 之初 考虑到 升级 通信地址 兼容 改变 通信地址 前人 设计 好了 工程 庞大 不易 修改 在此 基础 想到 程序 动态 动态 结构体 正好 结构体 固定 便宜 量 有一个 产品 区分 一种 产品 恰好 反射 机制 在此 记录 学习 反射 机制 计算机中 反射 运行 自我 检查 并对 内部 成员 操作 变量 类型 动态 改变 运行 作用 很多 高级 编程语言 中有 机制 都自 带有 机制 例子 指定 变量 类型 任意 类型 赋值 运行 检测 类型 高级语言 反射 机制 简单 来说 字符串 型 获取 类 函数 语言 机制 动手 声明 调用 方式 不便 处 在于 映射 函数 分散 文件 增加 新的 映射 修改 数组 头文件 支持 函数 变量 放到 指定 数据段 编译器 帮 数组 添加 成员 动作 借助 机制 回调函数 任意 文件 申明 修改 文件 内核 驱动 初始化 函数 遍历 执行 采用 方法 初始化 函数 遍历 调用 配合 利用 链接 脚本 每段 起始 地址 一段 遍历 执行 每一个 初始化 函数 
