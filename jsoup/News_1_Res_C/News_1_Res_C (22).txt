一种 面向 体系 结构 组件 模型 程序 功能 单元 称为 之间 定义 接口 契约 联系起来 接口 采用 中立 方式 定义 独立 硬件平台 操作 系统 编程语言 构建 系统 一种 统一 通用 方式 交互 架构 中有 两个 角色 服务提供者 使用者 软件 代理 扮演 两个 角色 层 用户 应用程序 第三 方的 组件 交互 层 则由 架构 面向 体系 结构 新鲜 事物 却是 传统 面向 对象 模型 替代 模型 面向 对象 模型 紧 耦合 符合 业务 开发 内聚 低 耦合 基于 系统 排除 面向对象 设计 构建 单个 整体 设计 面向 考虑到 系统 对象 基于 对象 整体 面向 对象 不同之处 在于 接口 本身 系统 原型 典型 例子 通用 对象 请求 代理 体系结构 长时间 定义 概念 架构 类似 微 升华 微 架构 重点 业务 组件化 服务化 原有 单个 业务 系统 拆分 多个 独立 开发 设计 运行 之间 交互 集成 基本上 架构 类型 开发 软件 网络 程序 独立 套件 又称 微 一种 方式 创建 仅限 特定 业务 功能 用户 订单 内容 之间 独立 写入 编程语言 数据库 式 微 轻量级 进行通信 微 很多 相同之处 两种 架构 典型 包含 松 耦合 分布式 组件 系统结构 围绕 概念 创建 架构 微 提供 一种 清晰 定义 方式 简单 一种 架构 另一种 架构 更好 取决于 构建 程序 微 原则 敏捷 软件开发 思想 高度 原则 演化 目标 减少 传统 总线 开发 复杂性 更适合 应用程序 集成 大型 程序 环境 在我看来 小型 程序 或许 适合 架构 消息中间件 组件 微 架构 适合 较小 分割 基于 系统 之间 关键 区别 在于 微 专注 于以 自治 方式 价值 两种 架构 背后 意图 尝试 集成 采用 模式 确保 交互运作 微 尝试 部署 新功能 快速 扩展 开发 团队 着重于 分散 代码 利用 自动化 执行 微 一种 思想 方法 更像 一种 思想 精炼 一种 精细 化 演进 更好 利用 先进 解决问题 容器 自动化 
